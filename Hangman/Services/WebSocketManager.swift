import Foundation
import SwiftUI

final class WebSocketManager: NSObject, URLSessionWebSocketDelegate {
    static let shared = WebSocketManager()
    
    @AppStorage("name") private var name: String = "noname"
    @AppStorage("avatarImage") private var avatarData: Data?
    @AppStorage("gameLanguage") private var selectedLanguage = "RU"
    @AppStorage("playerId") private var playerId: String?
    @AppStorage("currentGameId") private var currentGameId: String?
    
    var webSocketTask: URLSessionWebSocketTask?
    
    private var urlSession: URLSession!
    private var rejoinGameId: String?
    private var disconnectionTime: Date?
    private var isConnected = false
    private var currentMode: MultiplayerMode?
    private var wasSearchingCompetitive = false
    private var isWaitingForCoopPartner = false
    
    weak var delegate: WebSocketManagerDelegate?
    
    private override init() {
        super.init()
        let config = URLSessionConfiguration.default
        urlSession = URLSession(configuration: config, delegate: self, delegateQueue: OperationQueue())
        
        NotificationCenter.default.addObserver(
            self,
            selector: #selector(appDidBecomeActive),
            name: UIApplication.didBecomeActiveNotification,
            object: nil
        )

        NotificationCenter.default.addObserver(
            self,
            selector: #selector(appWillResignActive),
            name: UIApplication.willResignActiveNotification,
            object: nil
        )
    }
    
    deinit {
        NotificationCenter.default.removeObserver(self)
    }

    @objc private func appWillResignActive() {
        print("üí§ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É—Ö–æ–¥–∏—Ç –≤ —Ñ–æ–Ω.")

        // 2.1. –î–ª—è Coompetitive –≤ —Ä–µ–∂–∏–º–µ –ø–æ–∏—Å–∫–∞: –ª—é–±–æ–π –≤—ã—Ö–æ–¥ –∏–∑ –∏–≥—Ä—ã (–Ω–∞–∑–∞–¥/—Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ) –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å close session
        if wasSearchingCompetitive {
            print("üëãüèº –ò–≥—Ä–æ–∫ –±—ã–ª –≤ –ø–æ–∏—Å–∫–µ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π –∏–≥—Ä—ã. –†–∞–∑—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é.")
            disconnect()
            return
        }

        // 3. –î–ª—è Cooperative –≤ —Ä–µ–∂–∏–º–µ –æ–∂–∏–¥–∞–Ω–∏—è –¥—Ä—É–≥–∞: –µ—Å–ª–∏ –∏–≥—Ä–æ–∫ –≤—ã—à–µ–ª, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º –ø—Ä–∏ —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–∏.
        // –†–µ–∫–æ–Ω–Ω–µ–∫—Ç –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç –≤ appDidBecomeActive.
        if isWaitingForCoopPartner {
            print("‚è≥ –ò–≥—Ä–æ–∫ –≤ –ª–æ–±–±–∏ –æ–∂–∏–¥–∞–Ω–∏—è –¥—Ä—É–≥–∞. –ù–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º –ø—Ä–∏ —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–∏.")
            return
        }

        // 1.1. –î–ª—è Coompetitive –≤ —Ä–µ–∂–∏–º–µ –∏–≥—Ä—ã: –ª—é–±–æ–π –≤—ã—Ö–æ–¥ –∏–∑ –∏–≥—Ä—ã (–Ω–∞–∑–∞–¥/—Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ) –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å LEAVE_GAME
        // 3.1. –î–ª—è Cooperative –≤ —Ä–µ–∂–∏–º–µ –∏–≥—Ä—ã: —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ –∏–ª–∏ –≤—ã—Ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å LEAVE_GAME
        if currentGameId != nil {
            print("üëãüèº –ò–≥—Ä–æ–∫ –±—ã–ª –≤ –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä–µ. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º LEAVE_GAME.")
            leaveGame(gameId: currentGameId)
        }
    }

    @objc private func appDidBecomeActive() {
        print("‚òÄÔ∏è –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å—Ç–∞–ª–æ –∞–∫—Ç–∏–≤–Ω—ã–º.")

        if self.wasSearchingCompetitive {
            print("üîÅ –ò–≥—Ä–æ–∫ –≤–µ—Ä–Ω—É–ª—Å—è –ø–æ—Å–ª–µ —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è –≤–æ –≤—Ä–µ–º—è –ø–æ–∏—Å–∫–∞ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π –∏–≥—Ä—ã. –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ –∑–∞–Ω–æ–≤–æ.")
            if !isConnected { connect() } else { delegate?.webSocketDidConnect() }
            return
        }

        if self.isWaitingForCoopPartner {
            print("üîÅ –ò–≥—Ä–æ–∫ –≤–µ—Ä–Ω—É–ª—Å—è –≤ –ª–æ–±–±–∏ –æ–∂–∏–¥–∞–Ω–∏—è –¥—Ä—É–≥–∞. –°–æ–∑–¥–∞–µ–º –∫–æ–º–Ω–∞—Ç—É –∑–∞–Ω–æ–≤–æ.")
            if !isConnected { connect() } else { delegate?.webSocketDidConnect() }
            return
        }

        if !isConnected && currentGameId != nil {
            if let disconnectionTime = self.disconnectionTime {
                let timeSinceDisconnection = Date().timeIntervalSince(disconnectionTime)
                if timeSinceDisconnection <= 30 {
                    print("üîå [RECONNECT] –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä–æ–π –±—ã–ª–æ —Ä–∞–∑–æ—Ä–≤–∞–Ω–æ \(String(format: "%.1f", timeSinceDisconnection))—Å –Ω–∞–∑–∞–¥. –ü—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è...")
                    rejoinGameId = currentGameId
                    connect()
                } else {
                    print("üîå [RECONNECT] –û–∫–Ω–æ –¥–ª—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (30—Å) –∏—Å—Ç–µ–∫–ª–æ. –ü—Ä–æ—à–ª–æ \(String(format: "%.1f", timeSinceDisconnection))—Å. –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ.")
                    // clearGameStale() // PlayerId –Ω–µ –¥–æ–ª–∂–µ–Ω —É–¥–∞–ª—è—Ç—å—Å—è
                    delegate?.didReceiveError("–í—Ä–µ–º—è –¥–ª—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ.")
                }
                self.disconnectionTime = nil
            } else {
                print("üîå [RECONNECT] –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä–æ–π –±—ã–ª–æ —Ä–∞–∑–æ—Ä–≤–∞–Ω–æ, –ø—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è (–≤—Ä–µ–º—è —Ä–∞–∑—Ä—ã–≤–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ)...")
                rejoinGameId = currentGameId
                connect()
            }
        }
    }
    
    func connect() {
        if isConnected {
            print("‚ÑπÔ∏è –£–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ WebSocket, –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º webSocketDidConnect")
            DispatchQueue.main.async {
                self.delegate?.webSocketDidConnect()
            }
            return
        }
        
        print("üîå WebSocket –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è...")
        guard let url = URL(string: "wss://hangman.megoru.ru/ws") else {
            delegate?.didReceiveError("–ù–µ–≤–µ—Ä–Ω—ã–π URL WebSocket")
            return
        }
        
        webSocketTask = urlSession.webSocketTask(with: url)
        webSocketTask?.resume()
        listen()
    }
    
    func findGame(mode: MultiplayerMode) {
        if self.playerId == nil {
            self.playerId = UUID().uuidString
            print("üÜî PlayerId –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π: \(self.playerId!)")
        }
        self.currentMode = mode
        if mode == .duel {
            self.wasSearchingCompetitive = true
        }
        
        sendFindOrCreate(mode: mode)
    }
    
    func reconnect(gameId: String) {
        if let playerId = playerId {
            sendReconnect(gameId: gameId, playerId: playerId)
        } else {
            print("‚ÑπÔ∏è PlayerId is nil RECONNECT –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω!")
        }
    }
    
    func disconnect() {
        guard isConnected else {
            print("‚ÑπÔ∏è WebSocket —É–∂–µ –æ—Ç–∫–ª—é—á–µ–Ω.")
            return
        }
        print("üîå WebSocket –æ—Ç–∫–ª—é—á–∞–µ—Ç—Å—è.")
        webSocketTask?.cancel(with: .goingAway, reason: nil)
        isConnected = false
        webSocketTask = nil
        delegate = nil
    }
    
    func joinMulti(gameId: String) {
        guard isConnected else { return }
        let msg: [String: Any] = [
            "type": "JOIN_MULTI",
            "gameId": gameId,
            "playerId": playerId ?? NSNull(),
            "name": name.isEmpty ? NSNull() : name,
            "image": avatarData?.base64EncodedString() ?? NSNull()
        ]
        print("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º JOIN_MULTI:", msg)
        send(json: msg)
    }
    
    func leaveGame(gameId: String?) {
        guard isConnected, let ws = webSocketTask, ws.state == .running else {
            print("‚ö†Ô∏è –ù–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å LEAVE_GAME, —Å–æ–∫–µ—Ç –∑–∞–∫—Ä—ã—Ç")
            return
        }
        var msg: [String: Any] = ["type": "LEAVE_GAME"]
        if let gameId = gameId {
            msg["gameId"] = gameId
        }
        print("üîå –û—Ç–ø—Ä–∞–≤–∫–∞ LEAVE_GAME: \(msg)")
        send(json: msg)
    }
    
    // MARK: - URLSessionWebSocketDelegate
    
    func urlSession(_ session: URLSession, webSocketTask: URLSessionWebSocketTask, didOpenWithProtocol protocol: String?) {
        isConnected = true
        print("‚úÖ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω")

        DispatchQueue.main.async {
            self.delegate?.webSocketDidConnect()
        }

        DispatchQueue.main.asyncAfter(deadline: .now() + 0.2) {
            if let gameIdToRejoin = self.rejoinGameId {
                print("üîÅ –ü—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ \(gameIdToRejoin)")
                self.sendReconnect(gameId: gameIdToRejoin, playerId: self.playerId ?? NSNull())
                self.rejoinGameId = nil
            }
        }
    }
    
    func urlSession(_ session: URLSession, webSocketTask: URLSessionWebSocketTask, didCloseWith closeCode: URLSessionWebSocketTask.CloseCode, reason: Data?) {
        isConnected = false
        if closeCode != .goingAway && currentGameId != nil {
            print("‚ùå WebSocket –æ—Ç–∫–ª—é—á–µ–Ω –Ω–µ–ø—Ä–µ–¥–Ω–∞–º–µ—Ä–µ–Ω–Ω–æ, –∫–æ–¥: \(closeCode.rawValue). –ó–∞–ø—É—Å–∫–∞–µ–º 30-—Å–µ–∫—É–Ω–¥–Ω—ã–π —Ç–∞–π–º–µ—Ä –Ω–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ.")
            disconnectionTime = Date()
        } else {
            print("‚ùå WebSocket –æ—Ç–∫–ª—é—á–µ–Ω —à—Ç–∞—Ç–Ω–æ.")
        }
    }
    
    // MARK: - Sending messages
    
    private func sendFindOrCreate(mode: MultiplayerMode) {
        var msgDict: [String: Any]
        let nameValue: Any = name.isEmpty ? NSNull() : name
        let imageValue: Any = avatarData?.base64EncodedString() ?? NSNull()
        
        guard let currentPlayerId = self.playerId else {
            print("‚ùå –û—à–∏–±–∫–∞: playerId –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –Ω–∞–π—Ç–∏ –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É.")
            return
        }

        switch mode {
        case .duel:
            msgDict = ["type": "FIND_GAME",
                       "lang": selectedLanguage.lowercased(),
                       "name": nameValue,
                       "image": imageValue,
                       "playerId": currentPlayerId]
        case .friends:
            msgDict = ["type": "CREATE_MULTI",
                       "lang": selectedLanguage.lowercased(),
                       "name": nameValue,
                       "image": imageValue,
                       "playerId": currentPlayerId]
        case .code_friend:
            print("üü¢ –†–µ–∂–∏–º code_friend ‚Äî –∂–¥—ë–º —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ Game ID")
            return
        }
        print("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º:", msgDict)
        send(json: msgDict)
    }
    
    func sendMove(letter: Character, gameId: String) {
        guard isConnected else { return }
        let msgDict: [String: Any] = [
            "type": "MOVE",
            "gameId": gameId,
            "letter": String(letter).uppercased()
        ]
        print("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º:", msgDict)
        send(json: msgDict)
    }
    
    func sendReconnect(gameId: String, playerId: Any) {
        guard isConnected else { return }
        let msg: [String: Any] = [
            "type": "RECONNECT",
            "gameId": gameId,
            "playerId": playerId
        ]
        print("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º RECONNECT:", msg)
        send(json: msg)
    }
    
    public func send(json: [String: Any]) {
        guard let webSocketTask,
              webSocketTask.state == .running else {
            print("‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏, –Ω–æ —Å–æ–∫–µ—Ç –Ω–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ running")
            return
        }
        guard let data = try? JSONSerialization.data(withJSONObject: json),
              let jsonString = String(data: data, encoding: .utf8) else { return }

        let message = URLSessionWebSocketTask.Message.string(jsonString)
        webSocketTask.send(message) { error in
            if let error = error {
                DispatchQueue.main.async {
                    self.delegate?.didReceiveError("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: \(error.localizedDescription)")
                }
            }
        }
    }

    
    // MARK: - Receiving messages
    
    private func listen() {
        webSocketTask?.receive { [weak self] result in
            guard let self = self else { return }
            switch result {
            case .failure(let error):
                let nsError = error as NSError
                // 50: ENETDOWN, 54: ECONNRESET, 57: ENOTCONN, 60: ETIMEDOUT, 9: EBADF
                let networkErrors = [50, 54, 57, 60, 9]

                if nsError.domain == NSPOSIXErrorDomain && networkErrors.contains(nsError.code) {
                    if self.currentGameId != nil {
                         print("‚ÑπÔ∏è WebSocket receive loop failed during a game, likely due to network loss/backgrounding. Error: \(error.localizedDescription). Reconnect will be attempted on app activation.")
                    } else {
                        print("‚ÑπÔ∏è WebSocket receive loop ended (normal closure): \(error.localizedDescription)")
                    }
                }
                self.isConnected = false
            case .success(let message):
                switch message {
                case .string(let text):
                    self.handleMessage(text)
                case .data(let data):
                    if let text = String(data: data, encoding: .utf8) {
                        self.handleMessage(text)
                    }
                @unknown default:
                    break
                }
                self.listen()
            }
        }
    }
    
    private func handleMessage(_ text: String) {
        guard let data = text.data(using: .utf8),
              let json = try? JSONSerialization.jsonObject(with: data) as? [String: Any],
              let type = json["type"] as? String else { return }
        
        DispatchQueue.main.async {
            switch type {
            case "WAITING":
                print("‚úÖ WAITING")
                self.delegate?.didReceiveWaiting()
                
            case "MATCH_FOUND":
                struct MatchFoundPayload: Decodable {
                    let gameId: String
                    let wordLength: Int
                    let players: [Player]
                }
                self.decodePayload(MatchFoundPayload.self, data: data) { payload in
                    print("‚úÖ MATCH_FOUND, wordLength:", payload.wordLength, "players:", payload.players.count)
                    self.currentGameId = payload.gameId
                    self.wasSearchingCompetitive = false
                    self.isWaitingForCoopPartner = false
                    self.delegate?.didFindMatch(gameId: payload.gameId, wordLength: payload.wordLength, players: payload.players)
                }
                
            case "GAME_CANCELED":
                if let word = json["word"] as? String {
                    print("‚úÖ GAME_CANCELED, word:", word)
                    self.delegate?.didReceiveGameCanceled(word: word)
                }
                
            case "STATE_UPDATE":
                if let maskedWord = json["maskedWord"] as? String,
                   let attemptsLeft = json["attemptsLeft"] as? Int {
                    print("‚úÖ STATE_UPDATE, maskedWord:", maskedWord)
                    let duplicate = json["duplicate"] as? Bool ?? false
                    let guessedSet = (json["guessed"] as? [String]).map { Set($0) }
                    self.delegate?.didReceiveStateUpdate(maskedWord: maskedWord, attemptsLeft: attemptsLeft, duplicate: duplicate, guessed: guessedSet)
                }
                
            case "ROOM_CREATED":
                if let gameId = json["gameId"] as? String {
                    print("‚úÖ –ò–≥—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞, gameId:", gameId)
                    self.currentGameId = gameId
                    self.isWaitingForCoopPartner = true
                    self.delegate?.didCreateRoom(gameId: gameId)
                    self.delegate?.didReceiveWaitingFriend()
                }
                
            case "PLAYER_JOINED":
                struct PlayerJoinedPayload: Decodable {
                    let attemptsLeft: Int
                    let wordLength: Int
                    let players: [Player]
                    let gameId: String
                    let guessed: [String]
                }
                self.decodePayload(PlayerJoinedPayload.self, data: data) { payload in
                    print("‚úÖ PLAYER_JOINED, players:", payload.players.count)
                    self.currentGameId = payload.gameId
                    if payload.players.count >= 2 {
                        self.isWaitingForCoopPartner = false
                    }
                    self.delegate?.didReceivePlayerJoined(
                        attemptsLeft: payload.attemptsLeft,
                        wordLength: payload.wordLength,
                        players: payload.players,
                        gameId: payload.gameId,
                        guessed: Set(payload.guessed)
                    )
                }
                
            case "PLAYER_LEFT":
                if let name = json["name"] as? String {
                    print("‚úÖ PLAYER_LEFT, name:", name)
                    self.delegate?.didReceivePlayerLeft(name: name)
                }
                
            case "GAME_OVER":
                if let result = json["result"] as? String,
                   let word = json["word"] as? String {
                    print("‚úÖ –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å, result:", result)
                    self.delegate?.didReceiveGameOver(win: result == "WIN", word: word)
                    // self.playerId = nil // ID –∏–≥—Ä–æ–∫–∞ –¥–æ–ª–∂–µ–Ω —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è
                    self.currentGameId = nil
                    self.currentMode = nil
                    self.wasSearchingCompetitive = false
                    self.isWaitingForCoopPartner = false
                }
                
            case "GAME_OVER_COOP":
                struct CoopGameOverPayload: Decodable {
                    let result: String
                    let word: String
                    let attemptsLeft: Int
                    let wordLength: Int
                    let players: [Player]
                    let gameId: String
                    let guessed: [String]
                }
                self.decodePayload(CoopGameOverPayload.self, data: data) { payload in
                    print("‚úÖ –°–æ–≤–º–µ—Å—Ç–Ω–∞—è –∏–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å, result:", payload.result)
                    self.currentGameId = payload.gameId
                    self.isWaitingForCoopPartner = false
                    self.delegate?.didReceiveCoopGameOver(
                        result: payload.result,
                        word: payload.word,
                        attemptsLeft: payload.attemptsLeft,
                        wordLength: payload.wordLength,
                        players: payload.players,
                        gameId: payload.gameId,
                        guessed: Set(payload.guessed)
                    )
                }
                
            case "RESTORED":
                struct RestoredPayload: Decodable {
                    let gameId: String
                    let wordLength: Int
                    let maskedWord: String
                    let attemptsLeft: Int
                    let guessed: [String]
                    let players: [Player]
                }
                self.decodePayload(RestoredPayload.self, data: data) { payload in
                    print("‚úÖ RESTORED, gameId:", payload.gameId)
                    self.currentGameId = payload.gameId
                    if self.currentMode != .duel && payload.players.count < 2 {
                        self.isWaitingForCoopPartner = true
                    } else {
                        self.isWaitingForCoopPartner = false
                    }
                    self.delegate?.didRestoreGame(
                        gameId: payload.gameId,
                        wordLength: payload.wordLength,
                        maskedWord: payload.maskedWord,
                        attemptsLeft: payload.attemptsLeft,
                        guessed: Set(payload.guessed),
                        players: payload.players
                    )
                }
                
            case "ERROR":
                if let msg = json["msg"] as? String {
                    self.delegate?.didReceiveError(msg)
                }
                
            default:
                break
            }
        }
    }
    
    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è payload
    private func decodePayload<T: Decodable>(_ type: T.Type, data: Data, completion: (T) -> Void) {
        do {
            let payload = try JSONDecoder().decode(type, from: data)
            completion(payload)
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è \(type):", error.localizedDescription)
            if let decodingError = error as? DecodingError {
                print("‚ùå –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è:", decodingError)
            }
            self.delegate?.didReceiveError("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å —Å–µ—Ä–≤–µ—Ä–∞. –î–µ—Ç–∞–ª–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏.")
        }
    }
}
